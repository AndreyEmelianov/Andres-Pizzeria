generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
}

model User {
  id Int @id @default(autoincrement())

  fullName  String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime? 

  provider    String?
  prodivderId String?

  cart             Cart?
  orders           Order[]
  vereficationCode VereficationCode?  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id Int @id @default(autoincrement())

  name     String @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model Product {
  id Int @id @default(autoincrement())

  name        String
  imageUrl    String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  items       ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
 id Int @id @default(autoincrement())

 price     Int
 size      Int?
 pizzaType Int?

 product   Product @relation(fields: [productId], references: [id])
 productId Int

 cartItems CartItem[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products  Product[]

  cartItems CartItem[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement()) 

  totalAmount Int @default(0)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  token String

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement()) 

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  quantity Int
  
  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELED
}
model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VereficationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Story {
  id Int @id @default(autoincrement())

  previewImageUrl String
  items           StoryItem[]
  
  createdAt DateTime @default(now())
}

model StoryItem {
  id Int @id @default(autoincrement())

  storyId   Int
  story     Story @relation(fields: [storyId], references: [id])

  sourceUrl String
  
  createdAt DateTime @default(now())
}

